<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://duanjiuzhou.github.io/mengff.github.io/</id>
    <title>孟饭饭的独立博客</title>
    <updated>2020-05-23T06:38:59.308Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://duanjiuzhou.github.io/mengff.github.io/"/>
    <link rel="self" href="https://duanjiuzhou.github.io/mengff.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://duanjiuzhou.github.io/mengff.github.io/images/avatar.png</logo>
    <icon>https://duanjiuzhou.github.io/mengff.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, 孟饭饭的独立博客</rights>
    <entry>
        <title type="html"><![CDATA[Git Commit Message 提交规范配置说明]]></title>
        <id>https://duanjiuzhou.github.io/mengff.github.io/post/git-commit-message-ti-jiao-gui-fan-pei-zhi-shuo-ming/</id>
        <link href="https://duanjiuzhou.github.io/mengff.github.io/post/git-commit-message-ti-jiao-gui-fan-pei-zhi-shuo-ming/">
        </link>
        <updated>2020-05-23T06:31:55.000Z</updated>
        <summary type="html"><![CDATA[<h2 id="描述">描述</h2>
<p>针对 git commit log 提交规范问题，需要统一规范，不然很容易造成误解。</p>
]]></summary>
        <content type="html"><![CDATA[<h2 id="描述">描述</h2>
<p>针对 git commit log 提交规范问题，需要统一规范，不然很容易造成误解。</p>
<!-- more -->
<h2 id="commitizen-替代你的-git-commit">Commitizen: 替代你的 git commit</h2>
<h3 id="全局安装">全局安装</h3>
<pre><code>npm install -g commitizen
</code></pre>
<h3 id="项目级安装">项目级安装</h3>
<pre><code>npm install -D commitizen cz-customizable --dev
</code></pre>
<p><code>package.json</code>中配置:</p>
<pre><code>  &quot;config&quot;: {
    &quot;commitizen&quot;: {
      &quot;path&quot;: &quot;node_modules/cz-customizable&quot;
    }
  },
</code></pre>
<h3 id="配置规则">配置规则</h3>
<p>.cz-config.js 中写入自定义的配置：</p>
<pre><code>'use strict'

module.exports = {
  types: [
    {
      value: '💪 WIP',
      name: '进度: 工作进度',
    },
    {
      value: '✨ feat',
      name: '功能: 新功能',
    },
    {
      value: '🐞 fix',
      name: '修复: 修复bug',
    },
    {
      value: '🛠 refactor',
      name: '重构: 代码重构',
    },
    {
      value: '📚  docs',
      name: '文档: 只有文档变更',
    },
    {
      value: '🏁  test',
      name: '测试: 添加一个测试',
    },
    {
      value: '🗯 chore',
      name: '工具: 没有修改源代码，只是变更构建流程或辅助工具。',
    },
    {
      value: '💅 style',
      name: '样式: 空格，分号等格式修复。',
    },
    {
      value: '⏪ revert',
      name: '回滚: 代码回退。',
    },
    {
      value: '🏎  perf',
      name: '性能: 提升性能。',
    },
    {
      value: '🏗 build',
      name: '构建: 变更项目构建或外部依赖（例如scopes: webpack、gulp、npm等）',
    },
    {
      value: '🕹 ci',
      name:
        '集成: 更改持续集成软件的配置文件和package中的scripts命令，例如scopes: Travis, Circle等',
    },
  ],
  scopes: [],
  messages: {
    type: '选择一种你的提交类型:',
    scope: '选择一个scope (可选):',
    // used if allowCustomScopes is true
    customScope: 'Denote the SCOPE of this change:',
    subject: '短说明:\n',
    body: '长说明，使用&quot;|&quot;换行(可选)：\n',
    breaking: '非兼容性说明 (可选):\n',
    footer: '关联关闭的issue，例如：#31, #34(可选):\n',
    confirmCommit: '确定提交说明？',
  },
  footerPrefix: 'TAPD: ',
  allowCustomScopes: true,
  allowBreakingChanges: ['特性', '修复'],
  skipQuestions: ['scope', 'body', 'footer'],
}
</code></pre>
<p>效果如下：</p>
<figure data-type="image" tabindex="1"><img src="evernotecid://51D73625-C4C9-446A-B4F3-A332FC822AA9/appyinxiangcom/24946477/ENResource/p159" alt="5ad4a04c69a4eecb2818abc549237d6a.png" loading="lazy"></figure>
<h3 id="commitlint-校验你的-message">Commitlint: 校验你的 message</h3>
<p>commitlint: 可以帮助我们 lint commit messages, 如果我们提交的不符合指向的规范, 直接拒绝提交。</p>
<pre><code>yarn add commitlint-config-cz @commitlint/cli --dev
</code></pre>
<p>.commitlintrc.js 中写入:</p>
<pre><code>module.exports = {
  extends: [
    'cz'
  ],
  rules: {
  }
};
</code></pre>
<h3 id="结合-husky">结合 Husky</h3>
<p>校验 commit message 的最佳方式是结合 git hook, 所以需要配合 Husky。</p>
<pre><code>npm i husky@next
</code></pre>
<p>package.json 中添加:</p>
<pre><code>&quot;husky&quot;: {
    &quot;hooks&quot;: {
      ...,
      &quot;commit-msg&quot;: &quot;commitlint -e $GIT_PARAMS&quot;
    }
  },
</code></pre>
<p><a href="https://juejin.im/post/5afc5242f265da0b7f44bee4">参考</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[满足大屏场景的拖拽组件原理说明]]></title>
        <id>https://duanjiuzhou.github.io/mengff.github.io/post/man-zu-da-ping-chang-jing-de-tuo-zhuai-zu-jian-yuan-li-shuo-ming/</id>
        <link href="https://duanjiuzhou.github.io/mengff.github.io/post/man-zu-da-ping-chang-jing-de-tuo-zhuai-zu-jian-yuan-li-shuo-ming/">
        </link>
        <updated>2020-05-22T01:50:31.000Z</updated>
        <summary type="html"><![CDATA[<p>✍️ 源于大屏场景下，由于进行适配页面尺寸，随着页面尺寸的频繁变化，导致拖拽组件的定位失效，引起拖拽异常......</p>
]]></summary>
        <content type="html"><![CDATA[<p>✍️ 源于大屏场景下，由于进行适配页面尺寸，随着页面尺寸的频繁变化，导致拖拽组件的定位失效，引起拖拽异常......</p>
<!-- more -->
<h3 id="场景">场景🦄</h3>
<p><strong>组件需要满足功能：</strong></p>
<ul>
<li>基本PC端拖拽功能；</li>
<li>适配屏幕尺寸变化；</li>
<li>支持传入组件的定位<code>top, left</code>；（防止突发性页面尺寸比例变化，拖拽组件定位失效）</li>
</ul>
<h3 id="拖拽原理">拖拽原理</h3>
<h4 id="所需事件">所需事件</h4>
<ul>
<li>onMousedown</li>
<li>onMouseup</li>
<li>onMousemove</li>
</ul>
<h4 id="原理说明">原理说明</h4>
<h5 id="原理图">原理图🍥</h5>
<figure data-type="image" tabindex="1"><img src="https://duanjiuzhou.github.io/mengff.github.io//post-images/1590112364894.png" alt="" loading="lazy"></figure>
<h5 id="状态参数">状态参数</h5>
<pre><code>const dragData = 
{
    // x偏移值
    offsetX: 0,
    // y偏移值
    offsetY: 0,
    // 是否开始拖拽
    isDrag: false,
    // 当前组件距离当前窗口x轴的距离
    distanceX: 0,
    // 当前组件距离当前窗口y轴的距离
    distanceY: 0,
    // 组件top定位
    top: 0,
    // 组件left定位
    left: 0,
}
</code></pre>
<h5 id="步骤">步骤</h5>
<blockquote>
<p>第一步</p>
</blockquote>
<p>鼠标移动到组件可触发区域，鼠标按下，触发<code>onMousedown</code>事件，记录鼠标点击位置，开启拖动</p>
<pre><code>// 记录鼠标点击位置
dragData.distanceX = e.clientX
dragData.distanceY = e.clientY
// 开启拖动
 dragData.isDrag = true
</code></pre>
<blockquote>
<p>第二步</p>
</blockquote>
<p>鼠标移动，触发<code>onMousemove</code>事件，判断<code>dragData.isDrag</code>是否为真，为假跳出执行，为真继续执行。通过计算移动的距离，获取当前组件位置，算出最新位置，对组件进行更新位置信息。并记录当前组件距离当前窗口的距离、此时的偏移位置；</p>
<p><strong>计算移动的距离：</strong></p>
<p>计算移动的距离 = 本次距离当前窗口移动距离 - 上次距离当前窗口移动距离 + 上一次移动距离</p>
<pre><code>const moveDistanceX = e.clientX - distanceX + offsetX
const moveDistanceY = e.clientY - distanceY + offsetY
</code></pre>
<p><strong>获取最新位置：</strong></p>
<p>不带页面缩放：</p>
<p>最新位置 = 当前组件的位置 + 移动的距离</p>
<p>带页面缩放：</p>
<p>最新位置 = 当前组件的位置 + 移动的距离/页面缩放系数</p>
<pre><code>const _left = left + moveDistanceX / scaleX
const _top = top + moveDistanceY / scaleY
</code></pre>
<p><strong>更新组件位置信息：</strong></p>
<pre><code>el.style.left = _left + 'px'
el.style.top = _top + 'px'
</code></pre>
<p><strong>记录状态：</strong></p>
<p>记录当前组件距离当前窗口的距离：</p>
<pre><code>dragData.distanceX = e.clientX
dragData.distanceY = e.clientY
</code></pre>
<p>记录当前偏移位置</p>
<pre><code>dragData.offsetX = moveDistanceX
dragData.offsetY = moveDistanceY
</code></pre>
<blockquote>
<p>第三步</p>
</blockquote>
<p>鼠标抬起，触发<code>onMouseup</code>事件，关闭拖动；</p>
<pre><code>dragData.isDrag = false
</code></pre>
<h3 id="适配屏幕尺寸变化">适配屏幕尺寸变化</h3>
<h4 id="场景-2">场景</h4>
<p>用户控制屏幕，使屏幕尺寸发送变化，使拖拽组件保存的定位信息过期，导致拖拽异常。</p>
<h4 id="所需事件-2">所需事件</h4>
<ul>
<li>onResize</li>
</ul>
<h4 id="原理说明-2">原理说明</h4>
<p>向<code>window</code>绑定<code>resize</code>事件，监控页面尺寸变化，当尺寸发生变化，或者最新组件定位，清空保存的定位状态信息。</p>
<pre><code>const { left, top } = el.style
const _top = +top.replace(/px/, '')
const _left = +left.replace(/px/, '')
dragData = {
   offsetX: 0,
   offsetY: 0,
   isDrag: false,
   distanceX: 0,
   distanceY: 0,
   top: _top,
   left: _left,
}
</code></pre>
<h3 id="突发性页面尺寸比例变化定位修复">突发性页面尺寸比例变化定位修复</h3>
<h4 id="场景-3">场景</h4>
<p>没有通过<code>resize</code>事件触发的页面尺寸变化，通过修改页面宽高等导致页面尺寸变化，这时组件定位不准，需要恢复同比例下组件定位，并保证组件拖拽无异常。</p>
<h4 id="条件">条件</h4>
<p>页面原始宽高，变化后页面宽高</p>
<h4 id="方案">方案</h4>
<p>根据页面比例，计算出最新组件位置，对组件进行更新位置信息，并清空保存的定位状态信息。</p>
<p>页面比例 = 页面原始宽高 / 变化后页面宽高</p>
<p>最新组件位置 = 当前组件位置 / 页面比例</p>
]]></content>
    </entry>
</feed>